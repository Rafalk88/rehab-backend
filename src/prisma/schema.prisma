generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                    String   @id @default(uuid()) @db.Uuid
  login                 String   @unique
  email                 String   @unique
  passwordHash          String   @map("password_hash")
  mustChangePassword    Boolean  @default(false) @map("must_change_password")
  passwordChangedAt     DateTime? @map("password_changed_at")
  passwordChangedBy     String?  @db.Uuid @map("password_changed_by")
  isActive              Boolean  @default(true) @map("is_active")
  isLocked              Boolean  @default(false) @map("is_locked")
  lockedUntil           DateTime? @map("locked_until")
  failedLoginAttempts   Int      @default(0) @map("failed_login_attempts")
  lastFailedLoginAt     DateTime? @map("last_failed_login_at")
  lastLoginAt           DateTime? @map("last_login_at")
  organizationalUnitId  String?  @db.Uuid @map("organizational_unit_id")
  sexId                 String?  @db.Uuid @map("sex_id")
  firstNameId           String?  @db.Uuid @map("first_name_id")
  surnameId             String?  @db.Uuid @map("surname_id")
  createdAt             DateTime @default(now()) @map("created_at")
  updatedAt             DateTime @default(now()) @updatedAt @map("updated_at")
  createdBy             String?  @db.Uuid @map("created_by")
  updatedBy             String?  @db.Uuid @map("updated_by")
  deletedAt             DateTime? @map("deleted_at")
  retentionUntil        DateTime? @map("retention_until")

  organizationalUnit    OrganizationalUnit? @relation(fields: [organizationalUnitId], references: [id])
  sex                   Sex?                 @relation(fields: [sexId], references: [id])
  firstName             GivenName?           @relation(fields: [firstNameId], references: [id])
  surname               Surname?             @relation(fields: [surnameId], references: [id])
  userRoles             UserRole[]
  assignedRoles         UserRole[]           @relation("AssignedBy")
  userPermissions       UserPermission[]
  passwordOwnerHistory  PasswordHistory[]    @relation("PasswordOwner")
  passwordChangerHistory PasswordHistory[]   @relation("PasswordChanger")
  operationLogs         OperationLog[]
}

model GivenName {
  id             String   @id @default(uuid()) @db.Uuid
  firstName      String   @map("first_name") @unique
  createdAt      DateTime @default(now()) @map("created_at")
  updatedAt      DateTime @default(now()) @updatedAt @map("updated_at")
  createdBy      String?  @db.Uuid @map("created_by")
  updatedBy      String?  @db.Uuid @map("updated_by")
  deletedAt      DateTime? @map("deleted_at")
  retentionUntil DateTime? @map("retention_until")

  users          User[]
}

model Surname {
  id             String   @id @default(uuid()) @db.Uuid
  surname        String   @map("surname") @unique
  createdAt      DateTime @default(now()) @map("created_at")
  updatedAt      DateTime @default(now()) @updatedAt @map("updated_at")
  createdBy      String?  @db.Uuid @map("created_by")
  updatedBy      String?  @db.Uuid @map("updated_by")
  deletedAt      DateTime? @map("deleted_at")
  retentionUntil DateTime? @map("retention_until")

  users          User[]
}

model Sex {
  id             String   @id @default(uuid()) @db.Uuid
  sex            String   @unique
  createdAt      DateTime @default(now()) @map("created_at")
  updatedAt      DateTime @default(now()) @updatedAt @map("updated_at")
  createdBy      String?  @db.Uuid @map("created_by")
  updatedBy      String?  @db.Uuid @map("updated_by")
  deletedAt      DateTime? @map("deleted_at")
  retentionUntil DateTime? @map("retention_until")

  users          User[]
}

model OrganizationalUnit {
  id             String   @id @default(uuid()) @db.Uuid
  name           String   @unique
  description    String?  @map("description")
  createdAt      DateTime @default(now()) @map("created_at")
  updatedAt      DateTime @default(now()) @updatedAt @map("updated_at")
  createdBy      String?  @db.Uuid @map("created_by")
  updatedBy      String?  @db.Uuid @map("updated_by")
  deletedAt      DateTime? @map("deleted_at")
  retentionUntil DateTime? @map("retention_until")

  users          User[]
}

model Role {
  id             String   @id @default(uuid()) @db.Uuid
  name           String   @unique
  description    String   
  createdAt      DateTime @default(now()) @map("created_at")
  updatedAt      DateTime @default(now()) @updatedAt @map("updated_at")
  createdBy      String?  @db.Uuid @map("created_by")
  updatedBy      String?  @db.Uuid @map("updated_by")
  deletedAt      DateTime? @map("deleted_at")
  retentionUntil DateTime? @map("retention_until")

  userRoles      UserRole[]
  rolePermissions RolePermission[]
}

model RolePermission {
  id         String @id @default(uuid()) @db.Uuid
  roleId     String @db.Uuid @map("role_id")
  permission String
  role       Role   @relation(fields: [roleId], references: [id])
}

model UserRole {
  id          String   @id @default(uuid()) @db.Uuid
  userId      String   @db.Uuid @map("user_id")
  roleId      String   @db.Uuid @map("role_id")
  assignedById String  @db.Uuid @map("assigned_by")
  assignedAt  DateTime @default(now()) @map("assigned_at")

  user        User     @relation(fields: [userId], references: [id])
  role        Role     @relation(fields: [roleId], references: [id])
  assignedBy  User     @relation("AssignedBy", fields: [assignedById], references: [id])
}

model UserPermission {
  id         String  @id @default(uuid()) @db.Uuid
  userId     String  @db.Uuid
  permission String
  allowed    Boolean @default(true) // true = explicit allow, false = explicit deny
  user       User    @relation(fields: [userId], references: [id])
}

model PasswordHistory {
  id            String   @id @default(uuid()) @db.Uuid
  userId        String   @db.Uuid @map("user_id")
  passwordHash  String   @map("password_hash")
  changedAt     DateTime @default(now()) @map("changed_at")
  changedById   String   @db.Uuid @map("changed_by")

  user          User     @relation("PasswordOwner", fields: [userId], references: [id])
  changedBy     User     @relation("PasswordChanger", fields: [changedById], references: [id])
}

model OperationLog {
  id            String   @id @default(uuid()) @db.Uuid
  userId        String   @db.Uuid @map("user_id")
  action        String   
  actionDetails String   @map("action_details")
  oldValues     Json?    @map("old_values")
  newValues     Json?    @map("new_values")
  timestamp     DateTime @default(now())
  entityType    String   @map("entity_type")
  entityId      String   @map("entity_id")
  ipAddress     String   @map("ip_address")

  user          User     @relation(fields: [userId], references: [id])
}
